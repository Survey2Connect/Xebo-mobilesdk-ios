// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name xebompack_io
import Foundation
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import xebompack_io
public protocol XeboSurveyDelegate {
  func handleSurveyLoaded(response: [Swift.String : Swift.AnyObject])
}
@_Concurrency.MainActor @preconcurrency public struct XeboSwiftUIWrapper : SwiftUI.UIViewRepresentable {
  @_Concurrency.MainActor @preconcurrency public var surveyURL: Swift.String?
  @_Concurrency.MainActor @preconcurrency public var delegate: (any XeboSurveyDelegate)?
  @SwiftUICore.Binding @_projectedValueProperty($isSurveyVisible) @_Concurrency.MainActor @preconcurrency public var isSurveyVisible: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $isSurveyVisible: SwiftUICore.Binding<Swift.Bool> {
    get
  }
  @SwiftUICore.Binding @_projectedValueProperty($embeddedSurveyURL) @_Concurrency.MainActor @preconcurrency public var embeddedSurveyURL: Swift.String? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $embeddedSurveyURL: SwiftUICore.Binding<Swift.String?> {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(surveyURL: Swift.String? = nil, delegate: (any XeboSurveyDelegate)? = nil, isSurveyVisible: SwiftUICore.Binding<Swift.Bool>, embeddedSurveyURL: SwiftUICore.Binding<Swift.String?>)
  @objc @_hasMissingDesignatedInitializers public class Coordinator : ObjectiveC.NSObject, XeboSurveyDelegate {
    public func handleSurveyLoaded(response: [Swift.String : Swift.AnyObject])
    @objc deinit
  }
  @_Concurrency.MainActor @preconcurrency public func makeCoordinator() -> XeboSwiftUIWrapper.Coordinator
  @_Concurrency.MainActor @preconcurrency public func makeUIView(context: XeboSwiftUIWrapper.Context) -> XeboSurveyView
  @_Concurrency.MainActor @preconcurrency public func updateUIView(_ uiView: XeboSurveyView, context: XeboSwiftUIWrapper.Context)
  @_Concurrency.MainActor @preconcurrency public static func presentFullScreenSurvey(surveyURL: Swift.String?, delegate: (any XeboSurveyDelegate)?)
  @_Concurrency.MainActor @preconcurrency public static func loadSurveyAfter(visits: Swift.Int, surveyURL: Swift.String?, delegate: (any XeboSurveyDelegate)?)
  @_Concurrency.MainActor @preconcurrency public static func presentPopupSurvey(surveyURL: Swift.String?, delegate: (any XeboSurveyDelegate)?)
  public typealias Body = Swift.Never
  public typealias UIViewType = XeboSurveyView
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency public class XeboSurveyViewController : UIKit.UIViewController, XeboSurveyDelegate {
  @_Concurrency.MainActor @preconcurrency public var surveyDelegate: (any XeboSurveyDelegate)!
  @_Concurrency.MainActor @preconcurrency public var getSurveyLoadedResponse: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var surveyUrl: Swift.String!
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var thankyouTimeout: Swift.Double
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func handleSurveyLoaded(response: [Swift.String : Swift.AnyObject])
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency public class XeboSurveyView : UIKit.UIView, WebKit.WKScriptMessageHandler, WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor @preconcurrency public var getSurveyLoadedResponse: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var surveyDelegate: (any XeboSurveyDelegate)!
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @_Concurrency.MainActor @preconcurrency public func loadFullscreenSurvey(parent: UIKit.UIViewController, delegate: any XeboSurveyDelegate, surveyURL: Swift.String? = nil)
  @_Concurrency.MainActor @preconcurrency public func loadEmbedSurvey(_ surveyURL: Swift.String? = nil)
  @_Concurrency.MainActor @preconcurrency public func loadSurveyAfter(numberOfVisits visits: Swift.Int, parent: UIKit.UIViewController, delegate: any XeboSurveyDelegate, surveyURL: Swift.String? = nil)
  @_Concurrency.MainActor @preconcurrency public func loadSurvey(_ surveyURL: Swift.String? = nil)
  @_Concurrency.MainActor @preconcurrency public func loadPopupSurvey(parent: UIKit.UIViewController, delegate: any XeboSurveyDelegate, surveyURL: Swift.String? = nil)
  @objc deinit
}
extension XeboSwiftUIWrapper : Swift.Sendable {}
